package com.napier.sudoku.test;
import com.napier.sudoku.GameEngine;
import com.napier.sudoku.SudokuEngine;
import com.napier.sudoku.models.SudokuGrid;
import com.napier.sudoku.models.memory.Tree;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Timer;
import java.util.concurrent.atomic.AtomicBoolean;

public class Test {

    private static void listen(KeyEvent keyEvent){
        int aa = keyEvent.getKeyCode();
        if (aa == KeyEvent.VK_RIGHT){
            System.out.println("hello");
        }
        else {
            System.out.println(aa);
        }
    }
    private static void testTree() {
        Tree<Integer> integerTree = new Tree<>(0, true);
        integerTree.add(15);
        integerTree.add(140000);
        integerTree.add(1);
        integerTree.add(-34);
        integerTree.add(-45);
        integerTree.add(-465);
        integerTree.add(30);
        integerTree.add(16);
        integerTree.remove(-34);
        System.out.println("The answer is :: " + integerTree.contains(0));
    }

    private static void testArrayList(){
        Tree<Integer> integerTree = new Tree<>(null);
        integerTree.add(15);
        integerTree.add(140000);
        integerTree.add(1);
        integerTree.add(-34);
        integerTree.add(-45);
        integerTree.add(-465);
        integerTree.add(30);
        integerTree.add(16);
        integerTree.remove(-34);
        integerTree.forEach(e-> {
            System.out.println(e);
        });
    }

    private static void testCPWArray () {
        SudokuGrid grid = new SudokuGrid(9,9);
        for (int [] row: grid.getGame()){
            for  (int column :row)
                System.out.print(column + " " );

            System.out.println();
        }

    }

    /*
    Testing code generated by ChatGPT
    Not generating a code good enough
     */
    @Deprecated
    private static void testCHATGPT(){
        // TEST CHAT GPT CODE
        int[][] grid = new int[9][9];

        // Initialize the grid with numbers 1 to 9 in each row and column
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                grid[i][j] = (i % 9) + 1;
            }
        }

        // Shuffle the rows
        for (int i = 0; i < 9; i++) {
            Collections.shuffle(Arrays.asList(grid[i]));
        }

        // Transpose the array to shuffle the columns
        for (int i = 0; i < 9; i++) {
            for (int j = i + 1; j < 9; j++) {
                int temp = grid[i][j];
                grid[i][j] = grid[j][i];
                grid[j][i] = temp;
            }
        }

        // print array of grid
        for (int i = 0; i < grid.length; i++){
            for (int i1 = 0; i1 <grid.length; i1 +=3){
                System.out.print(grid[i][i1]);
                System.out.print(grid[i][i1+1]);
                System.out.print(grid[i][i1+2]);
                System.out.print("  ");
            }
            System.out.println("");
            if ((i+1) % 3 == 0 ){
                System.out.println("\n");
            }
        }
    }


    public static void main (String args []){

        AtomicBoolean run  = new AtomicBoolean(true);
        SudokuEngine engine = new SudokuEngine(9,9,5,true);
        Tester tester = new Tester(engine);
       tester.start();
        try {
            Thread.sleep(5000);
            System.out.println("Done running ");
            tester.setStop(true);


            ;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }



    }

}

class Tester extends Thread {
    public SudokuEngine engine;
    private volatile Boolean stop = false;
    public Boolean getStop() {
        return stop;
    }

    public void setStop(Boolean stop) {
        engine.setForceStop(true);
        this.stop = stop;
    }

    public Tester(SudokuEngine engine) {
        this.engine = engine;
    }
    @Override
    public void run() {
        engine.startGame();
    }
}
